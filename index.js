var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseAuthenticationOriginal = /** @class */ (function (_super) {
    __extends(FirebaseAuthenticationOriginal, _super);
    function FirebaseAuthenticationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAuthenticationOriginal.prototype.getIdToken = function (forceRefresh) { return cordova(this, "getIdToken", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.createUserWithEmailAndPassword = function (email, password) { return cordova(this, "createUserWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.sendEmailVerification = function () { return cordova(this, "sendEmailVerification", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.sendPasswordResetEmail = function (email) { return cordova(this, "sendPasswordResetEmail", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithEmailAndPassword = function (email, password) { return cordova(this, "signInWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.linkWithEmail = function (verificationId, smsCode) { return cordova(this, "linkWithEmail", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.verifyPhoneNumber = function (phoneNumber, timeout) { return cordova(this, "verifyPhoneNumber", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithVerificationId = function (verificationId, smsCode) { return cordova(this, "signInWithVerificationId", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInAnonymously = function () { return cordova(this, "signInAnonymously", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithGoogle = function (idToken, accessToken) { return cordova(this, "signInWithGoogle", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithFacebook = function (accessToken) { return cordova(this, "signInWithFacebook", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithTwitter = function (token, secret) { return cordova(this, "signInWithTwitter", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.onAuthStateChanged = function () { return cordova(this, "onAuthStateChanged", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseAuthenticationOriginal.prototype.setLanguageCode = function (languageCode) { return cordova(this, "setLanguageCode", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.useAppLanguage = function () { return cordova(this, "useAppLanguage", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signOut = function () { return cordova(this, "signOut", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.pluginName = "FirebaseAuthentication";
    FirebaseAuthenticationOriginal.plugin = "cordova-plugin-firebase-authentication";
    FirebaseAuthenticationOriginal.pluginRef = "cordova.plugins.firebase.auth";
    FirebaseAuthenticationOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-authentication";
    FirebaseAuthenticationOriginal.install = "ionic cordova plugin add cordova-plugin-firebase-authentication --variable FIREBASE_AUTH_VERSION=version";
    FirebaseAuthenticationOriginal.installVariables = ["FIREBASE_AUTH_VERSION"];
    FirebaseAuthenticationOriginal.platforms = ["Android", "iOS"];
    return FirebaseAuthenticationOriginal;
}(IonicNativePlugin));
var FirebaseAuthentication = new FirebaseAuthenticationOriginal();
export { FirebaseAuthentication };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWF1dGhlbnRpY2F0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBaUNVLDBDQUFpQjs7OztJQU8zRCwyQ0FBVSxhQUFDLFlBQXFCO0lBVWhDLCtEQUE4QixhQUM1QixLQUFhLEVBQ2IsUUFBZ0I7SUFTbEIsc0RBQXFCO0lBVXJCLHVEQUFzQixhQUFDLEtBQWE7SUFVcEMsMkRBQTBCLGFBQUMsS0FBYSxFQUFFLFFBQWdCO0lBUzFELDhDQUFhLGFBQUMsY0FBc0IsRUFBRSxPQUFlO0lBZXJELGtEQUFpQixhQUFDLFdBQW1CLEVBQUUsT0FBZTtJQVV0RCx5REFBd0IsYUFDdEIsY0FBc0IsRUFDdEIsT0FBZTtJQVNqQixrREFBaUI7SUFVakIsaURBQWdCLGFBQUMsT0FBZSxFQUFFLFdBQW1CO0lBU3JELG1EQUFrQixhQUFDLFdBQW1CO0lBVXRDLGtEQUFpQixhQUFDLEtBQWEsRUFBRSxNQUFjO0lBVy9DLG1EQUFrQjtJQVNsQixnREFBZSxhQUFDLFlBQW9CO0lBUXBDLCtDQUFjO0lBUWQsd0NBQU87Ozs7Ozs7O2lDQWpNVDtFQW1DNEMsaUJBQWlCO1NBQWhELHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBGaXJlYmFzZSBBdXRoZW50aWNhdGlvblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEZpcmViYXNlQXV0aGVudGljYXRpb24gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLWF1dGhlbnRpY2F0aW9uL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VBdXRoZW50aWNhdGlvbjogRmlyZWJhc2VBdXRoZW50aWNhdGlvbikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmZpcmViYXNlQXV0aGVudGljYXRpb24uY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKCd0ZXN0QGdtYWlsLmNvbScsICcxMjMnKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VBdXRoZW50aWNhdGlvbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtYXV0aGVudGljYXRpb24nLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5hdXRoJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtYXV0aGVudGljYXRpb24nLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtYXV0aGVudGljYXRpb24gLS12YXJpYWJsZSBGSVJFQkFTRV9BVVRIX1ZFUlNJT049dmVyc2lvbicsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWydGSVJFQkFTRV9BVVRIX1ZFUlNJT04nXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUF1dGhlbnRpY2F0aW9uIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBKV1QgdG9rZW4gdXNlZCB0byBpZGVudGlmeSB0aGUgdXNlciB0byBhIEZpcmViYXNlIHNlcnZpY2UuXHJcbiAgICogQHBhcmFtIGZvcmNlUmVmcmVzaCB7Ym9vbGVhbn0gRm9yY2UgUmVmcmVzaFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyB0aGUgaWQgdG9rZW5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRJZFRva2VuKGZvcmNlUmVmcmVzaDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmllcyB0byBjcmVhdGUgYSBuZXcgdXNlciBhY2NvdW50IHdpdGggdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MgYW5kIHBhc3N3b3JkLlxyXG4gICAqIEBwYXJhbSBlbWFpbCBFbWFpbFxyXG4gICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChcclxuICAgIGVtYWlsOiBzdHJpbmcsXHJcbiAgICBwYXNzd29yZDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYXRlcyBlbWFpbCB2ZXJpZmljYXRpb24gZm9yIHRoZSBjdXJyZW50IHVzZXIuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2VuZEVtYWlsVmVyaWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmlnZ2VycyB0aGUgRmlyZWJhc2UgQXV0aGVudGljYXRpb24gYmFja2VuZCB0byBzZW5kIGEgcGFzc3dvcmQtcmVzZXQgZW1haWwgdG8gdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MsXHJcbiAgICogd2hpY2ggbXVzdCBjb3JyZXNwb25kIHRvIGFuIGV4aXN0aW5nIHVzZXIgb2YgeW91ciBhcHAuXHJcbiAgICogQHBhcmFtIGVtYWlsIEVtYWlsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cclxuICAgKiBAcGFyYW0gZW1haWwgRW1haWxcclxuICAgKiBAcGFyYW0gcGFzc3dvcmQgUGFzc3dvcmRcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHZlcmlmaWNhdGlvbklkIFZlcmlmaWNhdGlvbiBJZCByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcclxuICAgKiBAcGFyYW0gc21zQ29kZSBTTVMgY29kZSBzZW50IHRvIHRoZSB1c2VyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgbGlua1dpdGhFbWFpbCh2ZXJpZmljYXRpb25JZDogc3RyaW5nLCBzbXNDb2RlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBTdGFydHMgdGhlIHBob25lIG51bWJlciB2ZXJpZmljYXRpb24gcHJvY2VzcyBmb3IgdGhlIGdpdmVuIHBob25lIG51bWJlci5cclxuICAgKiBOT1RFOiBBbmRyb2lkIHN1cHBvcnRzIGF1dG8tdmVyaWZ5IGFuZCBpbnN0YW50IGRldmljZSB2ZXJpZmljYXRpb24uXHJcbiAgICogVGhlcmVmb3JlIGluIHRoYXQgY2FzZXMgaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIGFzayBmb3Igc21zIGNvZGUuXHJcbiAgICogSXQncyByZWNvbW1lbmRlZCB0byByZWdpc3RlciBvbkF1dGhTdGF0ZUNoYW5nZWQgY2FsbGJhY2sgdG8gYmUgbm90aWZpZWQgb24gYXV0byBzaWduLWluLlxyXG4gICAqIHRpbWVvdXQgW21pbGxpc2Vjb25kc10gaXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgeW91IGFyZSB3aWxsaW5nIHRvIHdhaXQgZm9yIFNNUyBhdXRvLXJldHJpZXZhbFxyXG4gICAqIHRvIGJlIGNvbXBsZXRlZCBieSB0aGUgbGlicmFyeS4gTWF4aW11bSBhbGxvd2VkIHZhbHVlIGlzIDIgbWludXRlcy4gVXNlIDAgdG8gZGlzYWJsZSBTTVMtYXV0by1yZXRyaWV2YWwuXHJcbiAgICogSWYgeW91IHNwZWNpZnkgYSBwb3NpdGl2ZSB2YWx1ZSBsZXNzIHRoYW4gMzAgc2Vjb25kcywgbGlicmFyeSB3aWxsIGRlZmF1bHQgdG8gMzAgc2Vjb25kcy5cclxuICAgKiBAcGFyYW0gcGhvbmVOdW1iZXIgUGhvbmUgbnVtYmVyXHJcbiAgICogQHBhcmFtIHRpbWVvdXQge251bWJlcn0gVGltZW91dFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHZlcmlmeVBob25lTnVtYmVyKHBob25lTnVtYmVyOiBzdHJpbmcsIHRpbWVvdXQ6IG51bWJlcik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyB2ZXJpZmljYXRpb25JZCBhbmQgNi1kaWdpdCBTTVMgY29kZS5cclxuICAgKiBAcGFyYW0gdmVyaWZpY2F0aW9uSWQgVmVyaWZpY2F0aW9uIElEXHJcbiAgICogQHBhcmFtIHNtc0NvZGUgU01TIGNvZGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzaWduSW5XaXRoVmVyaWZpY2F0aW9uSWQoXHJcbiAgICB2ZXJpZmljYXRpb25JZDogc3RyaW5nLFxyXG4gICAgc21zQ29kZTogbnVtYmVyXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhbmQgdXNlIHRlbXBvcmFyeSBhbm9ueW1vdXMgYWNjb3VudCB0byBhdXRoZW50aWNhdGUgd2l0aCBGaXJlYmFzZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzaWduSW5Bbm9ueW1vdXNseSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXNlcyBHb29nbGUncyBpZFRva2VuIGFuZCBhY2Nlc3NUb2tlbiB0byBzaWduLWluIGludG8gZmlyZWJhc2UgYWNjb3VudC4gSW4gb3JkZXIgdG8gcmV0cmlldmUgdGhvc2UgdG9rZW5zIGZvbGxvdyBpbnN0cnVjdGlvbnMgZm9yIEFuZHJvaWQgYW5kIGlPU1xyXG4gICAqIEBwYXJhbSBpZFRva2VuIElEIFRva2VuXHJcbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIEFjY2VzcyBUb2tlblxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNpZ25JbldpdGhHb29nbGUoaWRUb2tlbjogc3RyaW5nLCBhY2Nlc3NUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZXMgRmFjZWJvb2sncyBhY2Nlc3NUb2tlbiB0byBzaWduLWluIGludG8gZmlyZWJhc2UgYWNjb3VudC4gSW4gb3JkZXIgdG8gcmV0cmlldmUgdGhvc2UgdG9rZW5zIGZvbGxvdyBpbnN0cnVjdGlvbnMgZm9yIEFuZHJvaWQgYW5kIGlPUy5cclxuICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gQWNjZXNzIFRva2VuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2lnbkluV2l0aEZhY2Vib29rKGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXNlcyBUd2l0dGVyJ3MgdG9rZW4gYW5kIHNlY3JldCB0byBzaWduLWluIGludG8gZmlyZWJhc2UgYWNjb3VudC4gSW4gb3JkZXIgdG8gcmV0cmlldmUgdGhvc2UgdG9rZW5zIGZvbGxvdyBpbnN0cnVjdGlvbnMgZm9yIEFuZHJvaWQgYW5kIGlPUy5cclxuICAgKiBAcGFyYW0gdG9rZW4gVG9rZW5cclxuICAgKiBAcGFyYW0gc2VjcmV0IFNlY3JldFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNpZ25JbldpdGhUd2l0dGVyKHRva2VuOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBhIGJsb2NrIGFzIGFuIGF1dGggc3RhdGUgZGlkIGNoYW5nZSBsaXN0ZW5lci4gVG8gYmUgaW52b2tlZCB3aGVuOlxyXG4gICAqICAgIC0gVGhlIGJsb2NrIGlzIHJlZ2lzdGVyZWQgYXMgYSBsaXN0ZW5lcixcclxuICAgKiAgICAtIEEgdXNlciB3aXRoIGEgZGlmZmVyZW50IFVJRCBmcm9tIHRoZSBjdXJyZW50IHVzZXIgaGFzIHNpZ25lZCBpbiwgb3JcclxuICAgKiAgICAtIFRoZSBjdXJyZW50IHVzZXIgaGFzIHNpZ25lZCBvdXQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcclxuICBvbkF1dGhTdGF0ZUNoYW5nZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCdzIHRoZSBjdXJyZW50IHVzZXIgbGFuZ3VhZ2UgY29kZS4gVGhlIHN0cmluZyB1c2VkIHRvIHNldCB0aGlzIHByb3BlcnR5IG11c3QgYmUgYSBsYW5ndWFnZSBjb2RlIHRoYXQgZm9sbG93cyBCQ1AgNDcuXHJcbiAgICogQHBhcmFtIGxhbmd1YWdlQ29kZSBMYW5ndWFnZSBDb2RlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0TGFuZ3VhZ2VDb2RlKGxhbmd1YWdlQ29kZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgbGFuZ3VhZ2VDb2RlIHRvIHRoZSBhcHDigJlzIGN1cnJlbnQgbGFuZ3VhZ2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgdXNlQXBwTGFuZ3VhZ2UoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNpZ25zIG91dCB0aGUgY3VycmVudCB1c2VyIGFuZCBjbGVhcnMgaXQgZnJvbSB0aGUgZGlzayBjYWNoZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzaWduT3V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==